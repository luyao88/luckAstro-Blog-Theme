---
// 只保留亮色和暗色模式图标
---

<div class="theme-toggle">
  <button
    id="color-mode-switch"
    class="vp-color-mode-switch"
    type="button"
    aria-label="切换主题模式"
  >
    <!-- 亮色模式图标（默认显示） -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="icon light-icon"
      viewBox="0 0 1024 1024"
      fill="currentColor"
      aria-label="light icon"
      name="light"
    >
      <path
        d="M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"
      ></path>
    </svg>
    <!-- 暗色模式图标（默认隐藏） -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="icon dark-icon"
      viewBox="0 0 1024 1024"
      fill="currentColor"
      aria-label="dark icon"
      name="dark"
      style="display: none;"
    >
      <path
        d="M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"
      ></path>
    </svg>
  </button>
</div>

<style>
  .theme-toggle {
    position: relative;
    display: flex;
    align-items: center;
    margin-left: 1rem;

    .vp-color-mode-switch {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 2.5rem;
      height: 2.5rem;
      border-radius: 50%;
      background: rgba(127, 127, 127, 0.15);
      border: none;
      cursor: pointer;
      color: var(--vh-font-color);
      transition:
        background-color 0.3s ease,
        transform 0.3s ease,
        color 0.3s ease;

      &:hover {
        background: var(--vh-main-color);
        color: white;
        transform: rotate(15deg);
      }

      .icon {
        position: absolute;
        width: 1.4rem;
        height: 1.4rem;
        opacity: 1;
        transform: scale(1);
        transition:
          opacity 0.3s ease,
          transform 0.3s ease;
      }
    }

    // 深色模式图标显示
    &[data-theme='dark'] {
      .dark-icon {
        display: block !important;
      }
      .light-icon {
        display: none !important;
      }
    }
  }

  // 深色模式适配
  [data-theme="dark"] .theme-toggle {
    .vp-color-mode-switch {
      background: rgba(255, 255, 255, 0.15);

      &:hover {
        background: var(--vh-main-color);
      }
    }
  }
</style>

<script>
  ;(function () {
    const colorModeSwitch = document.getElementById('color-mode-switch')
    if (!colorModeSwitch) return

    const themeToggle = colorModeSwitch.closest('.theme-toggle')

    // 设置主题函数 - 只保留light和dark模式
    const setTheme = (theme: 'light' | 'dark'): void => {
      const html = document.documentElement

      // 移除所有主题类
      html.classList.remove('dark', 'light', 'auto')

      // 添加新主题类
      html.classList.add(theme)

      // 更新组件的data-theme属性
      if (themeToggle) {
        themeToggle.setAttribute('data-theme', theme)
      }

      // 保存到localStorage
      localStorage.setItem('theme', theme)

      // 强制重绘解决过渡问题
      void colorModeSwitch.offsetWidth
    }

    // 切换主题 - 在light和dark之间切换
    const toggleTheme = () => {
      const currentTheme = document.documentElement.classList.contains('dark')
        ? 'dark'
        : 'light'
      const nextTheme = currentTheme === 'light' ? 'dark' : 'light'
      setTheme(nextTheme)
    }

    // 初始化主题 - 默认为亮色模式
    const savedTheme = localStorage.getItem('theme')
    if (savedTheme === 'dark') {
      setTheme('dark')
    } else {
      // 默认亮色模式
      setTheme('light')
      // 确保移除可能存在的dark类
      document.documentElement.classList.remove('dark')
    }

    // 添加过渡效果类
    setTimeout(() => {
      document.documentElement.classList.add('theme-transition')
    }, 100)

    // 绑定点击事件
    colorModeSwitch.addEventListener('click', toggleTheme)
  })()
</script>
